{
    "pipes": [
        {
            "name": "DuedatePipe",
            "id": "pipe-DuedatePipe-80d7d4a1c39116ee5237c879421568edd21ea4f1c02300175eea96e385e9e408a83aeb4ffcb11a962d5664a09d113c306aee41d01dce18e99c9747133b0c8a41",
            "file": "src/app/shared/pipes/duedate-pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "duedate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'duedate'\r\n})\r\nexport class DuedatePipe implements PipeTransform {\r\n\r\n  transform(value: string | Date): string {\r\n    if (!value) return '-';\r\n\r\n    const targetDate = new Date(value);\r\n    const today = new Date();\r\n\r\n    // Set time to 0 to compare only dates\r\n    targetDate.setHours(0, 0, 0, 0);\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const diffMs = targetDate.getTime() - today.getTime();\r\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffDays > 0) {\r\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} left`;\r\n    } else if (diffDays < 0) {\r\n      return `${Math.abs(diffDays)} day${Math.abs(diffDays) > 1 ? 's' : ''} overdue`;\r\n    } else {\r\n      return 'Today';\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        {
            "name": "UserNamePipe",
            "id": "pipe-UserNamePipe-041543af9316004502187c5b12686e0c2c6b97c47425d6558111c9fabf658d99f45db5934a5a99d3853d257172d2ea00896c91bcd231c8f962bd7a6e705fa13e",
            "file": "src/app/shared/pipes/user-name-pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "users",
                            "type": "Users[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "users",
                            "type": "Users[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "userName",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\n\r\n@Pipe({\r\n  name: 'userName'\r\n})\r\nexport class UserNamePipe implements PipeTransform {\r\n\r\n  transform(value: unknown, users: Users[]): string {\r\n\r\n    const user = users.find(u => u.id == value);\r\n    if(user) {\r\n      return user.fullName;\r\n    }\r\n    return '-';\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Kpis",
            "id": "interface-Kpis-0cfd55612aeb1c2fb746c7f7082d0dc1bcfda916bd0b2282a933de9d18fd5fe770aa5ac4dcab429c5e739d875037c67635d46aa58c5c16f2dbb5e7db12320b63",
            "file": "src/app/core/models/dashboard.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Kpis {\r\n    label: string,\r\n    value: number\r\n}",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Notifications",
            "id": "interface-Notifications-4afcc9482cc7a4020dafc4896f8f98a22d2da0318c646bc959ff950981f8da4533486d15be7d32a8469a22869da8146dea129a21bbca143b4132c1ada7d0f6da",
            "file": "src/app/core/models/notification.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Notifications {\r\n  id?: string;\r\n  userId: string;\r\n  type: string;\r\n  message: string;\r\n  projectId?: string;\r\n  taskId?: string;\r\n  read: boolean;\r\n  createdAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "read",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Projects",
            "id": "interface-Projects-2a2f30106e27d50e8fd63bcf99cdc863b7c516f2d09186485c5ffe24857f9ede022ede1b3b7f2aa115635f6953fc835fd2ef70e73210bbae122338dcf4b43a7a",
            "file": "src/app/core/models/project.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Projects {\r\n    id: string,\r\n    name: string,\r\n    status: string,\r\n    startDate: Date,\r\n    deadlineDate: Date,\r\n    description: string,\r\n    assignedTo: string\r\n  }",
            "properties": [
                {
                    "name": "assignedTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deadlineDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Tasks",
            "id": "interface-Tasks-13974829c4f1294e45f27e43ea87cff96a777ce188cbbe097ee422199a2407553470aca30ef4ce0604ef9bd855e2b3b4c81c629e22c8718b91301b1ab7ad612d",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tasks {\r\n  id: string;\r\n  name: string;\r\n  dueDate: string;\r\n  priority: 'Low' | 'Medium' | 'High';\r\n  status: 'To Do' | 'In Progress' | 'Done';\r\n  description: string;\r\n  projectId: string;\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"Low\" | \"Medium\" | \"High\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"To Do\" | \"In Progress\" | \"Done\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "userDialogData",
            "id": "interface-userDialogData-5a0812b0acef7b929859cd55f888af83048bcad46dc9e26a6fa79fb8f5f860626bf1842e0b719f7e938c4a9a1501b294c05744cdd9b56b864547862397641c3b",
            "file": "src/app/core/models/dialogData.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface userDialogData {\r\n    id: string;\r\n    canEdit: boolean\r\n}",
            "properties": [
                {
                    "name": "canEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Users",
            "id": "interface-Users-266c264066d71bca5ae6300f9bd2b9337e6318a4a360b8c779b65ed9294d31bd1f50667874cc799a895cdd1e2319afa03a244c48dd5884291b833bc75eb6d46e",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Users {\r\n      id: string,\r\n      fullName: string,\r\n      userName: string,\r\n      password: string,\r\n      creationDate: Date,\r\n      role: string\r\n    }",
            "properties": [
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-4cdf62e8e390a514ec6ddd050929d5f25ddde1e26ce4685e1f4c2e91c56bacde59b866f8f01985fe9fa0912c7a4cd3621f7d3e77e3a8eba9b7271ce8af6e06c3",
            "file": "src/app/auth/authService/auth-service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  public apiUrl = 'http://localhost:3000/users';\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    private http: HttpClient,\r\n  ) {}\r\n\r\n  public login(\r\n  email: string,\r\n  password: string\r\n): Observable<{ msg: string; status: number }> {\r\n  return this.http.get<Users[]>(`${this.apiUrl}?userName=${email}&password=${password}`).pipe(\r\n    map((result) => {\r\n      if (result[0]) {\r\n        const fakeToken = 'dummy-jwt-token';\r\n        const user = {\r\n          id: result[0].id,\r\n          role: result[0].role,\r\n        };\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n          localStorage.setItem('token', fakeToken);\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n        }\r\n\r\n        return { msg: 'Login Successfully', status: 200 };\r\n      } else {\r\n        return { msg: 'Invalid Credentials', status: 401 };\r\n      }\r\n    }),\r\n    catchError(() => of({ msg: 'Something went wrong', status: 500 }))\r\n  );\r\n}\r\n\r\n\r\n  public logout() {\r\n    localStorage.clear();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  public getUserRole(): string | null {\r\n      if (isPlatformBrowser(this.platformId)) {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    return user?.role || null;\r\n    }\r\n    return null\r\n  }\r\n\r\n  public isAuthenticated(): boolean {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      return !!localStorage.getItem('token');\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public getToken() {\r\n      if (isPlatformBrowser(this.platformId)) {\r\n      return localStorage.getItem('token');\r\n    }\r\n    return '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CommonService",
            "id": "injectable-CommonService-2ebf6c1bfc6cbfaf8b8cf909fa05997f8bd31643fae245bdde0debac7ba3529d00eae38813dcebbb45d8876d1c330f052aa33575db8dfa989b008d1dee884021",
            "file": "src/app/core/services/commonService/common-service.ts",
            "properties": [
                {
                    "name": "search$",
                    "defaultValue": "this.searchInput.asObservable().pipe(\r\n    debounceTime(500),\r\n    shareReplay(1) // So late subscribers get the last value\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "searchInput",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "escapeRegExp",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Users[]>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filteredSearchData",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keysToSearch",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keysToSearch",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getOverdueProjects",
                    "args": [
                        {
                            "name": "projects",
                            "type": "Projects[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Projects[]",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "projects",
                            "type": "Projects[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverdueTasks",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "Tasks[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Tasks[]",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "Tasks[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFailureSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'try again!'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'try again!'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSuccessSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'ok'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'ok'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerSearch",
                    "args": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { debounceTime, Observable, shareReplay, Subject } from 'rxjs';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ToasterComponent } from '../../../shared/components/toaster-component/toaster-component';\r\nimport { Projects } from '../../models/project.model';\r\nimport { Tasks } from '../../models/task.model';\r\nimport { Users } from '../../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonService {\r\n  private searchInput = new Subject<string>();\r\n\r\n  constructor(private http: HttpClient, private snackBar: MatSnackBar) {}\r\n\r\n  // Debounced, shared observable\r\n  public search$: Observable<string> = this.searchInput.asObservable().pipe(\r\n    debounceTime(500),\r\n    shareReplay(1) // So late subscribers get the last value\r\n  );\r\n\r\n  public triggerSearch(term: string) {\r\n    this.searchInput.next(term);\r\n  }\r\n\r\n  public filteredSearchData(\r\n    searchTerm: string,\r\n    data: any,\r\n    keysToSearch: string[]\r\n  ) {\r\n    if (!searchTerm?.trim()) return data;\r\n\r\n    const escapedTerm = this.escapeRegExp(searchTerm.trim());\r\n    const regex = new RegExp(escapedTerm, 'i'); // 'i' for case-insensitive\r\n\r\n    return data.filter((item: any) =>\r\n      keysToSearch.some((key) => regex.test(item[key]))\r\n    );\r\n  }\r\n\r\n  private escapeRegExp(text: string): string {\r\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // escape special regex chars\r\n  }\r\n\r\n  public fetchUsers(): Observable<Users[]> {\r\n    const apiUrl = 'http://localhost:3000/users';\r\n    return this.http.get<Users[]>(apiUrl);\r\n  }\r\n\r\n  //Snackbar that opens with success background\r\n  public openSuccessSnackBar(message: string, action: string = 'ok') {\r\n    this.snackBar.openFromComponent(ToasterComponent,\r\n      {\r\n     data: {\r\n      message: message,\r\n      action: action,\r\n      type: 'success',\r\n      snackBar: this.snackBar\r\n     },\r\n      duration: 3000,\r\n      panelClass: ['success-snackbar'],\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n  //Snackbar that opens with failure background\r\n  public openFailureSnackBar(message: string, action: string = 'try again!') {\r\n    this.snackBar.openFromComponent(ToasterComponent,\r\n      {\r\n     data: {\r\n      message: message,\r\n      action: action,\r\n      type: 'error',\r\n      snackBar: this.snackBar\r\n     },\r\n      duration: 3000000,\r\n      panelClass: 'error-snackbar',\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n\r\n  public getCurrentUser(): { id: string; role: string } {\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    return user;\r\n  }\r\n\r\n  public getOverdueTasks(tasks: Tasks[]): Tasks[] {\r\n    const now = new Date();\r\n    return tasks.filter((task) => {\r\n      const due = new Date(task.dueDate);\r\n      return task.status !== 'Done' && due < now;\r\n    });\r\n  }\r\n\r\n  public getOverdueProjects(projects: Projects[]): Projects[] {\r\n    const now = new Date();\r\n    return projects.filter((task) => {\r\n      const due = new Date(task.deadlineDate);\r\n      return task.status !== 'Done' && due < now;\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CronService",
            "id": "injectable-CronService-2876e8a5bae483fe89ab7a701f53e2a45453115ca169544814acadbe44ed7cdf2e631960d95216c9dcc0b9f23011125a53040f3b9c9f9a542a41f621b986b63e",
            "file": "src/app/core/services/cron-service.ts",
            "properties": [
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Projects[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tasks[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkOverdueTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "createNotification",
                    "args": [
                        {
                            "name": "task",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "scheduleMidnightCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ProjectService } from '../../projects/project-service';\r\nimport { TaskService } from '../../tasks/task-service';\r\nimport { firstValueFrom, forkJoin, takeUntil } from 'rxjs';\r\nimport { NotificationService } from './notification-service';\r\nimport { Projects } from '../models/project.model';\r\nimport { Tasks } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CronService {\r\n  public tasks: Tasks[] = [];\r\n  public projects: Projects[] = [];\r\n\r\n  constructor(\r\n    private projectService: ProjectService,\r\n    private taskService: TaskService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.scheduleMidnightCheck();\r\n  }\r\n\r\n  private scheduleMidnightCheck() {\r\n    const now = new Date();\r\n    const nextMidnight = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate() + 1,\r\n      0,\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n\r\n    const msUntilMidnight = nextMidnight.getTime() - now.getTime();\r\n\r\n    setTimeout(() => {\r\n      this.checkOverdueTasks();\r\n      this.scheduleMidnightCheck(); // schedule again for the next day\r\n    }, msUntilMidnight);\r\n  }\r\n\r\n  public async checkOverdueTasks() {\r\n    await this.fetchData();\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    console.log(this.tasks, this.projects);\r\n    const overdueToday = this.tasks.filter((task) => {\r\n      if (!task.dueDate || task.status.toLowerCase() === 'Done') return false;\r\n\r\n      const due = new Date(task.dueDate);\r\n      due.setHours(0, 0, 0, 0);\r\n      console.log(due.getTime() === today.getTime());\r\n      return due.getTime() === today.getTime();\r\n    });\r\n\r\n    overdueToday.forEach((task) => {\r\n      console.log(task);\r\n      this.createNotification(task);\r\n    });\r\n  }\r\n\r\n  public async fetchData(): Promise<void> {\r\n    const [tasks, projects] = await firstValueFrom(\r\n      forkJoin([\r\n        this.taskService.fetchTasks(),\r\n        this.projectService.fetchProjects(),\r\n      ])\r\n    );\r\n    this.tasks = tasks;\r\n    this.projects = projects;\r\n  }\r\n  private createNotification(task: Tasks) {\r\n    const project = this.projects.find((p) => p.id == task.projectId);\r\n\r\n    if (project) {\r\n      this.notificationService\r\n        .create({\r\n          userId: project.assignedTo,\r\n          type: 'task-overdue',\r\n          message: `Task ${task.name} will be overdue today`,\r\n          projectId: project.id,\r\n          taskId: task.id,\r\n          read: false,\r\n          createdAt: new Date().toISOString(),\r\n        })\r\n        .subscribe();\r\n    }\r\n  }\r\n\r\n  // this function use forn testing that it emit at particular time for testing purpose \r\n\r\n  // private scheduleTaskAtParticularTime() {\r\n  //   const now = new Date();\r\n  //   const target = new Date();\r\n\r\n  //   target.setHours(3, 46, 0, 0); // 3:46 AM today\r\n\r\n  //   // If it's already past 3:21 AM, schedule for tomorrow\r\n  //   if (now > target) {\r\n  //     target.setDate(target.getDate() + 1);\r\n  //   }\r\n\r\n  //   const delay = target.getTime() - now.getTime();\r\n\r\n  //   setTimeout(() => {\r\n  //     this.checkOverdueTasks();\r\n  //     this.scheduleTaskAtParticularTime(); // Reschedule for the next day\r\n  //   }, delay);\r\n  // }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-1da64efeaa24db72950c37779d324b6bb766abce151dbe138e4ce87a01d2d33f84db420744c309dfa7576c7223a42cfe611f6278e513de407225480f72ade36d",
            "file": "src/app/core/http-service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n\r\n   public baseUrl = 'http://localhost:3000/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public async getProjects() {\r\n    \r\n     const result = await this.http.get(`${this.baseUrl}projects`)\r\n    \r\n     console.log(result)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-150b8fddd8c377d8587357ac813263c2c5db3f4b464138568ac0b824680e8d97ac5526302c5b830f36ac15b3d83ac94a1f143cce37dc55b3f3cccc7a4db56383",
            "file": "src/app/core/services/loader-service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoaderService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-b13e03480c90ea01e60cb05d0804ce00317032ec217407b2cb15e939d06fe52561af13f80157a347e62deb1b0be250959760a157859425d9ca607819b00955de",
            "file": "src/app/core/services/notification-service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/notifications'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Notifications",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "Notifications",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotifications",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsRead",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Notifications } from '../models/notification.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n\r\n  private baseUrl = 'http://localhost:3000/notifications';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n public getNotifications(userId: string) {\r\n    return this.http.get<Notifications[]>(`${this.baseUrl}?userId=${userId}&_sort=-createdAt`);\r\n  }\r\n\r\n public markAsRead(id: string) {\r\n    return this.http.patch(`${this.baseUrl}/${id}`, { read: true });\r\n  }\r\n\r\n public create(notification: Notifications) {\r\n    return this.http.post<Notification>(this.baseUrl, notification);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-b3666f69b677e1f99e4c62eac0bd76e6c82126655f8d861d3919766f7d988514528adbcdb936c032e0b0f3fce819bed610b7f8a3bccecb27f5737c79d110f258",
            "file": "src/app/projects/project-service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/projects'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Projects>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Projects>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Projects[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Projects>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Projects>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Projects } from '../core/models/project.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectService {\r\n\r\n  public apiUrl = 'http://localhost:3000/projects';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public fetchProjects(): Observable<Projects[]> {\r\n        return this.http.get<Projects[]>(this.apiUrl);\r\n    }\r\n\r\n     public getProject(id: number): Observable<Projects> {\r\n        return this.http.get<Projects>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n  public addProject(project: Projects): Observable<Projects> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.http.post<Projects>(this.apiUrl, project, { headers });\r\n    }\r\n\r\n  public updateProject(project: Projects, id: number): Observable<Projects> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.http.patch<Projects>(`${this.apiUrl}/${id}`, project, { headers });\r\n    }\r\n\r\n  public deleteProject(id: number): Observable<Projects> {\r\n        return this.http.delete<Projects>(`${this.apiUrl}/${id}`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-f328969b090d6f5b8e19f5cd5cde3428e5fde139d2318e013c3e2e428153f85c741f912f447d64ed2464926623c2d9948656e0c9da35007149818072af72a348",
            "file": "src/app/tasks/task-service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/tasks'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTasks",
                    "args": [
                        {
                            "name": "project",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tasks>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTasks",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tasks>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTasks",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tasks[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasks",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tasks>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTasks",
                    "args": [
                        {
                            "name": "project",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tasks>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Tasks } from '../core/models/task.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n public apiUrl = 'http://localhost:3000/tasks';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public fetchTasks(projectId?: string): Observable<Tasks[]> {\r\n     const url = projectId ? `${this.apiUrl}?projectId=${projectId}` : this.apiUrl\r\n        return this.http.get<Tasks[]>(url);\r\n    }\r\n\r\n     public getTasks(id: string): Observable<Tasks> {\r\n        return this.http.get<Tasks>(`${this.apiUrl}/${id}`);\r\n    }\r\n\r\n  public addTasks(project: Tasks): Observable<Tasks> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.http.post<Tasks>(this.apiUrl, project, { headers });\r\n    }\r\n\r\n  public updateTasks(project: Tasks, id: string): Observable<Tasks> {\r\n        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n        return this.http.patch<Tasks>(`${this.apiUrl}/${id}`, project, { headers });\r\n    }\r\n    \r\n\r\n  public deleteTasks(id: string): Observable<Tasks> {\r\n        return this.http.delete<Tasks>(`${this.apiUrl}/${id}`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-618374fbc8caa3b6b24ffaa81cd5f87eecddb185724ba4acc78554580d98f88f9b867c1b13af0f0989ea6015bb837baf689a0172afe9ed226fcb865ae41b2032",
            "file": "src/app/users/user-service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "User",
                            "type": "Users",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Users>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "User",
                            "type": "Users",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Users>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Users[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Users>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "User",
                            "type": "Users",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Users>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "User",
                            "type": "Users",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Users } from '../core/models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  public apiUrl = 'http://localhost:3000/users';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public fetchUsers(): Observable<Users[]> {\r\n    return this.http.get<Users[]>(this.apiUrl);\r\n  }\r\n\r\n  public getUser(id: string): Observable<Users> {\r\n    return this.http.get<Users>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  public addUser(User: Users): Observable<Users> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    return this.http.post<Users>(this.apiUrl, User, { headers });\r\n  }\r\n\r\n  public updateUser(User: Users, id: string): Observable<Users> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    return this.http.patch<Users>(`${this.apiUrl}/${id}`, User, { headers });\r\n  }\r\n\r\n  public deleteUser(id: string): Observable<Users> {\r\n    return this.http.delete<Users>(`${this.apiUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-e33e0419c3867bee4563dd45df031e22e72b7a951d175e3c00b3f9e08fc76776ae97bf76b5f5d675821872261c73d4b76a1e25fe395fee21ade938f3f5d5fd59",
            "file": "src/app/auth/gaurds/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../authService/auth-service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    if (!this.authService.isAuthenticated()) {\r\n      this.router.navigate(['login']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "RoleGuard",
            "id": "injectable-RoleGuard-40ba4591d8634fe25644b065d963dde9da369a8ec6519b6ba452402f2f8c42448ddf0bedc980eb46edc5b2cd278f72faf861698dfbac6365b90a33afb55b5ed2",
            "file": "src/app/auth/gaurds/role.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAccess",
                    "args": [
                        {
                            "name": "expectedRoles",
                            "type": "string[] | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "expectedRoles",
                            "type": "string[] | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  CanActivate,\r\n  CanLoad,\r\n  CanActivateChild,\r\n  Route,\r\n  UrlSegment,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router\r\n} from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from '../authService/auth-service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RoleGuard implements CanActivate, CanLoad, CanActivateChild {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  private checkAccess(expectedRoles: string[] | string): boolean {\r\n    const currentRole = this.authService.getUserRole();\r\nif(currentRole) {\r\n    if (Array.isArray(expectedRoles)) {\r\n      return expectedRoles.includes(currentRole);\r\n    } else {\r\n      return currentRole === expectedRoles;\r\n    }\r\n  }\r\n  return false\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (!this.checkAccess(route.data['role'])) {\r\n      this.router.navigate(['/unauthorized']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  canLoad(route: Route, segments: UrlSegment[]): boolean {\r\n    if (!this.checkAccess(route.data?.['role'])) {\r\n      this.router.navigate(['/unauthorized']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.canActivate(route, state);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "App",
            "id": "component-App-71d40bf3f0e9d41be07635254cff5590571f318a0e3f708f9dc83370bc996ac9c6d1af812eca7e6ac554793383a9c541bdfe81bc9240f313a90f341169f960f6",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-assesment'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { CronService } from './core/services/cron-service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.scss'\r\n})\r\nexport class App {\r\n  constructor(private cronService: CronService) {\r\n\r\n  }\r\n  protected title = 'angular-assesment';\r\n}\r\n",
            "styleUrl": "./app.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cronService",
                        "type": "CronService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "cronService",
                        "type": "CronService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "\r\n<router-outlet></router-outlet>\r\n\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-94980d9c90445e1640eabff9d017901cbbbea66b54ce27c1b7fae9d85b36693a76070c66e6437d9615c7a4ab2911f8b2ec7e805b3967c3012a8c079eeed49752",
            "file": "src/app/dashboard/dashboard-component/dashboard-component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseChartDirective",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BaseChartDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "chartOptions",
                    "defaultValue": "{\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "kpis",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Kpis[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectChartData",
                    "defaultValue": "this.initChartData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Projects[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "taskChartData",
                    "defaultValue": "this.initChartData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tasks[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Users[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "countByStatus",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initChartData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByLabel",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "Kpis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Kpis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BaseChartDirective",
                    "type": "directive"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Chart, ChartDataset, ChartOptions, registerables } from 'chart.js';\r\nimport { BaseChartDirective } from 'ng2-charts';\r\nimport { UserService } from '../../users/user-service';\r\nimport { ProjectService } from '../../projects/project-service';\r\nimport { TaskService } from '../../tasks/task-service';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { Kpis } from '../../core/models/dashboard.model';\r\nimport { forkJoin, Subject, takeUntil } from 'rxjs';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Projects } from '../../core/models/project.model';\r\nimport { Tasks } from '../../core/models/task.model';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule, BaseChartDirective, materialImports],\r\n  templateUrl: './dashboard-component.html',\r\n  styleUrls: ['./dashboard-component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DashboardComponent {\r\n  public users: Users[] = [];\r\n  public tasks: Tasks[] = [];\r\n  public projects: Projects[] = [];\r\n  public kpis: Kpis[] = [];\r\n  public isLoading: boolean = false;\r\n\r\n  public taskChartData = this.initChartData();\r\n  public projectChartData = this.initChartData();\r\n\r\n  public chartOptions: ChartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n  private destroy$ = new Subject<void>();\r\n\r\n  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private projectService: ProjectService,\r\n    private taskService: TaskService,\r\n    private commonService: CommonService,\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isLoading = true;\r\n    forkJoin([\r\n      this.userService.fetchUsers(),\r\n      this.taskService.fetchTasks(),\r\n      this.projectService.fetchProjects(),\r\n    ])\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(([users, tasks, projects]) => {\r\n        this.users = users;\r\n        this.tasks = tasks;\r\n        this.projects = projects;\r\n\r\n        requestIdleCallback(() => {\r\n          this.buildDashboard();\r\n          this.isLoading = false;\r\n          this.cdr.detectChanges();\r\n        });\r\n      });\r\n  }\r\n\r\n  trackByLabel(index: number, item: Kpis): string {\r\n    return item.label;\r\n  }\r\n\r\n  private buildDashboard(): void {\r\n    // KPIs\r\n    this.kpis = [\r\n      { label: 'Users', value: this.users.length },\r\n      { label: 'Total Tasks', value: this.tasks.length },\r\n      {\r\n        label: 'Overdue Tasks',\r\n        value: this.commonService.getOverdueTasks(this.tasks).length,\r\n      },\r\n      { label: 'Total Projects', value: this.projects.length },\r\n      {\r\n        label: 'Overdue Projects',\r\n        value: this.commonService.getOverdueProjects(this.projects).length,\r\n      },\r\n    ];\r\n\r\n    // Tasks Chart\r\n    const taskStatus = this.countByStatus(this.tasks);\r\n    this.taskChartData = {\r\n      labels: ['Done', 'In Progress', 'To Do'],\r\n      datasets: [\r\n        {\r\n          data: [\r\n            taskStatus['done'] || 0,\r\n            taskStatus['in progress'] || 0,\r\n            taskStatus['to do'] || 0,\r\n          ],\r\n          backgroundColor: ['#32a864', '#8ba832', '#3432a8'],\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Projects Chart\r\n    const projectStatus = this.countByStatus(this.projects);\r\n    this.projectChartData = {\r\n      labels: ['Done', 'In Progress', 'To Do'],\r\n      datasets: [\r\n        {\r\n          data: [\r\n            projectStatus['done'] || 0,\r\n            projectStatus['in progress'] || 0,\r\n            projectStatus['to do'] || 0,\r\n          ],\r\n          backgroundColor: ['#66BB6A', '#FFA726', '#EF5350'],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  private initChartData(): { labels: string[]; datasets: ChartDataset[] } {\r\n    return {\r\n      labels: ['Done', 'In Progress', 'To Do'],\r\n      datasets: [\r\n        {\r\n          data: [],\r\n          backgroundColor: ['#66BB6A', '#FFA726', '#EF5350'],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  private countByStatus<T extends { status: string }>(\r\n    items: T[]\r\n  ): { [key: string]: number } {\r\n    return items.reduce((acc, item) => {\r\n      const key = item.status.toLowerCase();\r\n      acc[key] = (acc[key] || 0) + 1;\r\n      return acc;\r\n    }, {} as { [key: string]: number });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main-container {\r\n  height: calc(100% - 70px);\r\n  overflow-y: auto;\r\n\r\n  .loader {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .dashboard-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    padding: 24px;\r\n\r\n    .kpi-section {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n      gap: 16px;\r\n\r\n      .kpi-card {\r\n        padding: 16px;\r\n        text-align: center;\r\n        background: #f5f7fa;\r\n\r\n        .kpi-title {\r\n          font-size: 14px;\r\n          color: #777;\r\n        }\r\n\r\n        .kpi-value {\r\n          font-size: 24px;\r\n          font-weight: bold;\r\n          margin-top: 8px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .charts-section {\r\n      display: grid;\r\n      grid-template-columns: 1fr 1fr;\r\n      gap: 24px;\r\n\r\n      .chart-card {\r\n        padding: 16px;\r\n\r\n        .chart-title {\r\n          font-size: 18px;\r\n          font-weight: 600;\r\n          text-align: center;\r\n          margin: 12px 0 0 0;\r\n          color: #424242;\r\n        }\r\n\r\n        .chart-wrapper {\r\n          position: relative;\r\n          height: 300px;\r\n\r\n\r\n          canvas {\r\n            display: block;\r\n            width: 100% !important;\r\n            height: 100% !important;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./dashboard-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "\r\n<div class=\"main-container\">\r\n<div class=\"dashboard-container\" *ngIf=\"!isLoading; else loading\">\r\n  <!-- KPI Cards -->\r\n  <div class=\"kpi-section\">\r\n    <mat-card class=\"kpi-card\" *ngFor=\"let kpi of kpis; trackBy: trackByLabel\">\r\n      <div class=\"kpi-title\">{{ kpi.label }}</div>\r\n      <div class=\"kpi-value\">{{ kpi.value }}</div>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Charts -->\r\n  <div class=\"charts-section\">\r\n\r\n    <mat-card class=\"chart-card\"  *ngIf=\"taskChartData.datasets[0].data.length\">\r\n      <div class=\"chart-title\">Projects Status Overview</div>\r\n      <div class=\"chart-wrapper\">\r\n      <canvas baseChart\r\n        [data]=\"projectChartData\"\r\n        [options]=\"chartOptions\"\r\n        [type]=\"'doughnut'\">\r\n      </canvas>\r\n      </div>\r\n    </mat-card>\r\n\r\n    <mat-card *ngIf=\"taskChartData.datasets[0].data.length\" class=\"chart-card\">\r\n        <div class=\"chart-title\">Tasks Status Overview</div>\r\n      <div class=\"chart-wrapper\">\r\n      <canvas baseChart\r\n        [data]=\"taskChartData\"\r\n        [options]=\"chartOptions\"\r\n        [type]=\"'doughnut'\">\r\n      </canvas>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n<ng-template #loading >\r\n  <div class=\"loader\">\r\n  <mat-spinner ></mat-spinner>\r\n  </div>\r\n</ng-template>\r\n</div>\r\n\r\n"
        },
        {
            "name": "Header",
            "id": "component-Header-63eb12ca9e3bc1d8cdd64b551699bd15fea06151517e1984048215f108d8c77217d8fd26f66fb58d16e3f8b82fcd8ca874e9dabe363f100d695030116dcb54b3",
            "file": "src/app/shared/components/header/header.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "search",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "add",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "emitFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "emitAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { materialImports } from '../../../core/models/material.imports';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  imports: [CommonModule, FormsModule, materialImports],\r\n  templateUrl: './header.html',\r\n  styleUrl: './header.scss'\r\n})\r\nexport class Header {\r\n\r\n  @Input() title: string = '';\r\n\r\n  @Input() selectedFilter: string = '';\r\n\r\n  @Input() search: boolean = false;\r\n\r\n  @Input() filter: boolean = false;\r\n\r\n@Output() emitFilter = new EventEmitter();\r\n\r\n@Output() add = new EventEmitter();\r\n\r\n  public emit() {\r\n    console.log('skjsjsjj')\r\n    this.emitFilter.emit(this.selectedFilter)\r\n  }\r\n\r\n  public emitAdd() {\r\n     this.add.emit()\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./header.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": " <div class=\"container\">\r\n    <div class=\"left-container\">\r\n        <span class=\"title\">{{title}}</span>\r\n       <app-search-input *ngIf=\"search\"\r\n       ></app-search-input>\r\n     <mat-form-field *ngIf=\"filter\" appearance=\"outline\">\r\n    <mat-label>Sort</mat-label>\r\n    <mat-select [(ngModel)]=\"selectedFilter\" (selectionChange)=\"emit()\"\r\n    panelClass=\"my-select-panel-class\"\r\n    >\r\n      <mat-option value=\"\">None</mat-option>\r\n      <mat-option value=\"dueDate\">Due Date</mat-option>\r\n      <mat-option value=\"priority\">Priority</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n    </div>\r\n    <div class=\"right-container\">\r\n        <button class=\"btn\" (click)=\"emitAdd()\" matFab extended color=\"primary\">\r\n        <mat-icon class=\"icon\">add</mat-icon>\r\n        Add New\r\n      </button>\r\n    </div>\r\n  </div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-e9b24940abac3c81f541b32094a773243ae80e4d20367593615c89c43db76e98059edd1cb4ce24f1506d9d8478de0e8ec8685bd358cebc9dfa3584da71f4713e",
            "file": "src/app/shared/components/home-component/home-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMobile",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sidenav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSidenav",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSidenav"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "Notification"
                },
                {
                    "name": "TopHeader"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { RouterModule, RouterOutlet } from '@angular/router';\r\nimport { Notification } from '../../../core/components/notification/notification';\r\nimport { TopHeader } from '../../../core/top-header/top-header';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { CommonModule } from '@angular/common';\r\nimport { materialImports } from '../../../core/models/material.imports';\r\n\r\n@Component({\r\n  selector: 'app-home-component',\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    RouterOutlet,\r\n    Notification,\r\n    TopHeader,\r\n    materialImports,\r\n  ],\r\n  templateUrl: './home-component.html',\r\n  styleUrl: './home-component.scss',\r\n})\r\nexport class HomeComponent {\r\n  public isMobile: boolean = true;\r\n  @ViewChild(MatSidenav)\r\n  sidenav!: MatSidenav;\r\n\r\n  constructor(private observer: BreakpointObserver) {}\r\n\r\n  ngOnInit() {\r\n    this.observer.observe(['(max-width: 800px)']).subscribe((screenSize) => {\r\n      if (screenSize.matches) {\r\n        this.isMobile = true;\r\n      } else {\r\n        this.isMobile = false;\r\n      }\r\n      console.log(this.isMobile);\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./home-component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "observer",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "observer",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav mode=\"side\" [opened]=\"true\"  >\r\n<!-- Sidebar content -->\r\n    <div class=\"menu-items\" >\r\n    \r\n    <div class=\"item\" [ngClass]=\"{'center-icon' : isMobile  }\"  routerLink=\"/dashboard\" routerLinkActive=\"active\"> <mat-icon>analytics</mat-icon> <span *ngIf=\"!isMobile\">Dashboard</span></div>\r\n    <div class=\"item\" [ngClass]=\"{'center-icon' : isMobile }\"  routerLink=\"/projects\" routerLinkActive=\"active\"> <mat-icon>assignment</mat-icon> <span *ngIf=\"!isMobile\">Projects</span></div>\r\n    <div class=\"item\" [ngClass]=\"{'center-icon' : isMobile }\"  routerLink=\"/users\" routerLinkActive=\"active\"> <mat-icon>people</mat-icon> <span *ngIf=\"!isMobile\">Users</span></div>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <app-top-header></app-top-header>\r\n    <!-- Main content -->\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-0be31052580df281437da848c3ca27b03191ca10b545d778ce329c3ba22ecbf01d035fe50e8894e723d9662d515284a60fd8c174b4289c5b8145d50f5765dccf",
            "file": "src/app/auth/login-component/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "commonService",
                    "defaultValue": "inject(CommonService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMsg$",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginForm",
                    "defaultValue": "this.fb.group({\r\n    username: ['', [Validators.required]],\r\n    password: ['', Validators.required],\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngZone",
                    "defaultValue": "inject(NgZone)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  inject,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../authService/auth-service';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { BehaviorSubject, of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { materialImports } from '../../core/models/material.imports';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, materialImports],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LoginComponent {\r\n  private fb = inject(FormBuilder);\r\n  private authService = inject(AuthService);\r\n  private router = inject(Router);\r\n  private commonService = inject(CommonService);\r\n  private ngZone = inject(NgZone);\r\n\r\n  public loginForm = this.fb.group({\r\n    username: ['', [Validators.required]],\r\n    password: ['', Validators.required],\r\n  });\r\n\r\n  public errorMsg$ = new BehaviorSubject<string | null>(null);\r\n\r\n  public onSubmit(): void {\r\n    const { username, password } = this.loginForm.value;\r\n\r\n    this.authService\r\n      .login(username as string, password as string)\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response.status === 200) {\r\n            this.commonService.openSuccessSnackBar(response.msg);\r\n            this.router.navigate(['/dashboard']);\r\n          } else {\r\n            this.ngZone.run(() => this.errorMsg$.next(response.msg));\r\n            this.commonService.openFailureSnackBar(response.msg);\r\n          }\r\n        }),\r\n        catchError((err) => {\r\n          this.commonService.openFailureSnackBar(err.msg || 'Login failed');\r\n          this.errorMsg$.next('Something went wrong');\r\n          return of();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card>\r\n  <h3>Login</h3>\r\n  <mat-card-content>\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div>\r\n        <mat-form-field appearance=\"outline\">\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            placeholder=\"Username\"\r\n            formControlName=\"username\"\r\n          />\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div>\r\n        <mat-form-field appearance=\"outline\">\r\n          <input\r\n            type=\"password\"\r\n            matInput\r\n            placeholder=\"Password\"\r\n            formControlName=\"password\"\r\n          />\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"error-container\">\r\n        <span class=\"error\" *ngIf=\"errorMsg$ | async as error\">{{\r\n          error\r\n        }}</span>\r\n      </div>\r\n\r\n      <div class=\"button\">\r\n        <button class=\"submit-btn\" type=\"submit\" mat-button>Login</button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "NotFound",
            "id": "component-NotFound-5ed8a2d3c2d159227cbd83e3a0da636109fc7c45c3b5337a9841d81bef2b15da239d0fd49b8f20dcb2f9dcd3f2d4df6eea5e56e4e78c26067bb5f6b1d243c0c8",
            "file": "src/app/shared/components/not-found/not-found.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  imports: [RouterModule],\r\n  templateUrl: './not-found.html',\r\n  styleUrl: './not-found.scss'\r\n})\r\nexport class NotFound {\r\n\r\n}\r\n",
            "styleUrl": "./not-found.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n<div class=\"error-container\">\r\n        <h1> 404 </h1>\r\n        <p>\r\n            Oops! The page you're\r\n            looking for is not here.\r\n        </p>\r\n        <a routerLink=\"/dashboard\">\r\n            Go Back to Home\r\n        </a>\r\n    </div>\r\n    </div>"
        },
        {
            "name": "Notification",
            "id": "component-Notification-a5e2dcf6364bf00210aa72492ae52afbff0f5367f3923380a4a5af94ff1576e8b6882686ed4c187af946bdf705702650f79e2020493c5592684fca8af7db8e95",
            "file": "src/app/core/components/notification/notification.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notification.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commonService",
                    "defaultValue": "inject(CommonService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "this.commonService.getCurrentUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifications$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Notifications[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unreadCount$",
                    "defaultValue": "of(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNotification",
                    "args": [
                        {
                            "name": "n",
                            "type": "Notifications",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "n",
                            "type": "Notifications",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NotificationService } from '../../services/notification-service';\r\nimport { Notifications } from '../../models/notification.model';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CommonService } from '../../services/commonService/common-service';\r\nimport { timer, Observable, of } from 'rxjs';\r\nimport { switchMap, map, shareReplay } from 'rxjs/operators';\r\nimport { materialImports } from '../../models/material.imports';\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  standalone: true,\r\n  imports: [CommonModule, materialImports],\r\n  templateUrl: './notification.html',\r\n  styleUrl: './notification.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Notification implements OnInit {\r\n  private notificationService = inject(NotificationService);\r\n  private commonService = inject(CommonService);\r\n  private currentUser = this.commonService.getCurrentUser();\r\n\r\n  public notifications$: Observable<Notifications[]> = of([]);\r\n  public unreadCount$: Observable<number> = of(0);\r\n\r\n  ngOnInit(): void {\r\n    if (!this.currentUser?.id) {\r\n      this.notifications$ = timer(0, 1000 * 30).pipe(map(() => []));\r\n      this.unreadCount$ = this.notifications$.pipe(map(() => 0));\r\n      return;\r\n    }\r\n\r\n    this.notifications$ = timer(0, 1000 * 30).pipe(\r\n      switchMap(() =>\r\n        this.notificationService.getNotifications(this.currentUser.id)\r\n      ),\r\n      shareReplay(1)\r\n    );\r\n\r\n    this.unreadCount$ = this.notifications$.pipe(\r\n      map((notifs) => notifs.filter((n) => !n.read).length)\r\n    );\r\n  }\r\n\r\n  public openNotification(n: Notifications): void {\r\n    if (!n.read && n.id) {\r\n      this.notificationService.markAsRead(n.id).subscribe();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./notification.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n  <mat-icon\r\n    [matBadge]=\"unreadCount$ | async\"\r\n    [matBadgeHidden]=\"(unreadCount$ | async) === 0\"\r\n    class=\"icon\"\r\n  >\r\n    notifications\r\n  </mat-icon>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n  <ng-container *ngIf=\"notifications$ | async as notifications\">\r\n    <div class=\"container\" *ngIf=\"notifications.length; else noNotifications\">\r\n    <button\r\n      class=\"message\"\r\n      mat-menu-item\r\n      *ngFor=\"let n of notifications\"\r\n      [ngClass]=\"{ unread: !n.read }\"\r\n      (click)=\"openNotification(n)\"\r\n    >\r\n      <div [ngClass]=\"{ 'font-bold': !n.read }\">{{ n.message }}</div>\r\n      <small>{{ n.createdAt | date: 'short' }}</small>\r\n    </button>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template #noNotifications>\r\n    <div class=\"noData\">No notifications</div>\r\n  </ng-template>\r\n</mat-menu>\r\n"
        },
        {
            "name": "ProjectForm",
            "id": "component-ProjectForm-46fd6426a67d994154cf691e437be134149f4e76fb25073355445e68f149e6e5883bc2229020934a4bfd25bd9d3e9585ae313b0e83142fe8ff3ee36dae07478c",
            "file": "src/app/projects/project-form/project-form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "app-project-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./project-form.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ProjectForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectData",
                    "defaultValue": "{} as Projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "statuses",
                    "defaultValue": "['To Do', 'In Progress', 'Done']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[{ id: '', fullName: '' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifyUser",
                    "args": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Projects",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { provideNativeDateAdapter } from '@angular/material/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { ProjectService } from '../project-service';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { NotificationService } from '../../core/services/notification-service';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Projects } from '../../core/models/project.model';\r\n\r\n@Component({\r\n  selector: 'app-project-form',\r\n  imports: [CommonModule, ReactiveFormsModule, materialImports],\r\n  providers: [provideNativeDateAdapter()],\r\n  templateUrl: './project-form.html',\r\n  styleUrl: './project-form.scss',\r\n})\r\nexport class ProjectForm {\r\n  public form: FormGroup;\r\n  public currentDate: Date = new Date();\r\n  public projectId: number = 0;\r\n  public users: { id: string; fullName: string }[] = [{ id: '', fullName: '' }];\r\n  public statuses = ['To Do', 'In Progress', 'Done'];\r\n  public projectData = {} as Projects;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<ProjectForm>,\r\n    private projectService: ProjectService,\r\n    private commonService: CommonService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    if (this.data && this.data.id) {\r\n      this.projectId = this.data.id;\r\n      this.getProject();\r\n    }\r\n    this.getUsers();\r\n    this.form = this.fb.group({\r\n      name: [this.projectData.name || '', Validators.required],\r\n      startDate: [\r\n        this.projectData.startDate || this.currentDate,\r\n        Validators.required,\r\n      ],\r\n      deadlineDate: [this.projectData.deadlineDate || ''],\r\n      assignedTo: [this.projectData.assignedTo || '', Validators.required],\r\n      status: [this.projectData.status || '', Validators.required],\r\n      description: [this.projectData.description || '', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  private getProject() {\r\n    this.projectService.getProject(this.projectId).subscribe(\r\n      (response) => {\r\n        this.projectData = response;\r\n        const { id, ...pro } = response;\r\n        this.form.setValue(pro);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private getUsers() {\r\n    this.commonService.fetchUsers().subscribe((res) => {\r\n      this.users = res.map(({ id, fullName }) => ({ id, fullName }));\r\n    });\r\n  }\r\n\r\n  public onSubmit(): void {\r\n    if (this.form.valid) {\r\n      const UpdatedProject = { ...this.form.value, id: this.projectData.id };\r\n\r\n      const response = this.projectId\r\n        ? this.projectService.updateProject(UpdatedProject, this.projectId)\r\n        : this.projectService.addProject(UpdatedProject);\r\n\r\n      response.subscribe(\r\n        (result) => {\r\n          if (result) {\r\n            this.dialogRef.close(true);\r\n            const message = this.projectId\r\n              ? 'Project Updated'\r\n              : 'Project Created';\r\n            this.commonService.openSuccessSnackBar(message, 'ok');\r\n            if (result.assignedTo !== this.projectData.assignedTo) {\r\n              this.notifyUser(result);\r\n            }\r\n          }\r\n        },\r\n        (error) => {\r\n          this.commonService.openFailureSnackBar(\r\n            'something went wrong',\r\n            'try again!'\r\n          );\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  private notifyUser(project: Projects) {\r\n    this.notificationService\r\n      .create({\r\n        userId: project.assignedTo,\r\n        type: 'new-assignment',\r\n        message: `You’ve been assigned to Project ${project.name}`,\r\n        projectId: project.id,\r\n        read: false,\r\n        createdAt: new Date().toISOString(),\r\n      })\r\n      .subscribe(\r\n        () => {},\r\n        (err) => {\r\n          this.commonService.openFailureSnackBar(\r\n            'something went wrong',\r\n            'try again!'\r\n          );\r\n        }\r\n      );\r\n  }\r\n}\r\n",
            "styleUrl": "./project-form.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectForm>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectForm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n  <span class=\"title action\" >{{projectId ? 'Edit' : 'Add'}}</span><p class=\"title\">{{form.value.name ? form.value.name : 'New Project'}}</p>\r\n  </div>\r\n  <div class=\"body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" style=\"padding: 16px\">\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"name\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Start Date</mat-label>\r\n        <input matInput [matDatepicker]=\"picker\" formControlName=\"startDate\"/>\r\n        <mat-datepicker-toggle\r\n          matIconSuffix\r\n          [for]=\"picker\"\r\n        ></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Deadline</mat-label>\r\n        <input matInput [matDatepicker]=\"deadline\" formControlName=\"deadlineDate\" />\r\n        <mat-datepicker-toggle\r\n          matIconSuffix\r\n          [for]=\"deadline\"\r\n        ></mat-datepicker-toggle>\r\n        <mat-datepicker #deadline></mat-datepicker>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Assigned</mat-label>\r\n        <mat-select formControlName=\"assignedTo\">\r\n          <mat-option *ngFor=\"let user of users\" [value]=\"user.id\"\r\n            >{{ user.fullName }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Status</mat-label>\r\n        <mat-select formControlName=\"status\">\r\n          <mat-option *ngFor=\"let s of statuses\" [value]=\"s\"\r\n            >{{ s }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Description</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"description\" />\r\n      </mat-form-field>\r\n\r\n      <div class=\"actions-btn\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"form.invalid\"\r\n        >\r\n          {{projectId ? 'Update' : 'Add'}}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProjectListComponent",
            "id": "component-ProjectListComponent-1a12495ff4f90849072fbed2c43e6c4479981fbad935db19bc6298f5b97818b3aedd23ee69259c1539e66490764f2a74013f82b538e79dcbae04cb176bec6313",
            "file": "src/app/projects/project-list/project-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-list",
            "styleUrls": [
                "./project-list.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<Projects>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\r\n    'id',\r\n    'name',\r\n    'assignTo',\r\n    'status',\r\n    'startDate',\r\n    'deadline',\r\n    'description',\r\n    'actions',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Projects[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Users[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fetchProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "projectName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectToTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDatasource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ProjectForm"
                },
                {
                    "name": "Header"
                },
                {
                    "name": "DuedatePipe",
                    "type": "pipe"
                },
                {
                    "name": "materialImports"
                },
                {
                    "name": "UserNamePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ViewChild,\r\n  OnInit,\r\n  OnDestroy,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { ProjectForm } from '../project-form/project-form';\r\nimport { Header } from '../../shared/components/header/header';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { DuedatePipe } from '../../shared/pipes/duedate-pipe';\r\nimport { ProjectService } from '../project-service';\r\nimport { Router } from '@angular/router';\r\nimport { UserNamePipe } from '../../shared/pipes/user-name-pipe';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Projects } from '../../core/models/project.model';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-project-list',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    ProjectForm,\r\n    Header,\r\n    DuedatePipe,\r\n    materialImports,\r\n    UserNamePipe,\r\n  ],\r\n  templateUrl: './project-list.html',\r\n  styleUrls: ['./project-list.scss'],\r\n})\r\nexport class ProjectListComponent implements OnInit, OnDestroy {\r\n  public displayedColumns: string[] = [\r\n    'id',\r\n    'name',\r\n    'assignTo',\r\n    'status',\r\n    'startDate',\r\n    'deadline',\r\n    'description',\r\n    'actions',\r\n  ];\r\n\r\n  public dataSource = new MatTableDataSource<Projects>([]);\r\n  public isLoading = false;\r\n\r\n  private destroy$ = new Subject<void>();\r\n  private projects: Projects[] = [];\r\n  public users: Users[] = [];\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private commonService: CommonService,\r\n    private projectService: ProjectService,\r\n    private router: Router,\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.commonService.search$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((term) => {\r\n        const filtered = this.commonService.filteredSearchData(\r\n          term,\r\n          this.projects,\r\n          ['name', 'status']\r\n        );\r\n        this.dataSource.data = filtered;\r\n        this.cdr.detectChanges();\r\n      });\r\n\r\n    this.getUsers();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.fetchProjects();\r\n  }\r\n\r\n  private getUsers() {\r\n    this.commonService.fetchUsers().subscribe((next) => {\r\n      this.users = next;\r\n    });\r\n  }\r\n\r\n  private updateDatasource() {\r\n    this.dataSource.data = this.projects;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n\r\n    // Default sort: ID ascending\r\n    this.sort.active = 'id';\r\n    this.sort.direction = 'asc';\r\n\r\n    this.sort.sortChange.emit({\r\n      active: this.sort.active,\r\n      direction: this.sort.direction,\r\n    });\r\n  }\r\n\r\n  private fetchProjects(): void {\r\n    this.projectService.fetchProjects().subscribe({\r\n      next: (projects) => {\r\n        this.projects = projects;\r\n        this.updateDatasource();\r\n      },\r\n      error: (err) => {\r\n        console.error('Failed to fetch projects:', err);\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  public openForm(id?: number): void {\r\n    const dialogRef = this.dialog.open(ProjectForm, {\r\n      data: { id },\r\n      width: '400px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) this.fetchProjects();\r\n    });\r\n  }\r\n\r\n  public onDelete(projectId: number, projectName: string): void {\r\n    this.projectService.deleteProject(projectId).subscribe({\r\n      next: (res) => {\r\n        if (res) {\r\n          this.fetchProjects();\r\n          this.commonService.openSuccessSnackBar(\r\n            `${projectName} Project Deleted`\r\n          );\r\n        }\r\n      },\r\n      error: () => alert('Something went wrong'),\r\n    });\r\n  }\r\n\r\n  public addNew(): void {\r\n    this.dialog.open(ProjectForm, { width: '400px' });\r\n  }\r\n\r\n  public redirectToTask(id: string): void {\r\n    this.router.navigate(['/projects', id, 'tasks']);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top-container {\r\n  height: calc(100% - 70px);\r\n  display: flex;\r\n  overflow-y: auto;\r\n  flex-direction: column;\r\n\r\n  .loader {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .project-card {\r\n    overflow-y: auto;\r\n    height: 100%;\r\n    margin-bottom: 4px;\r\n    border-radius: 0;\r\n    background-color: #fafafa;\r\n\r\n    .header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n\r\n      .title {\r\n        margin: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  .table-container {\r\n    overflow-x: auto;\r\n\r\n    table {\r\n      width: 100%;\r\n      min-width: 600px;\r\n\r\n      .data-row {\r\n        box-shadow: 0px 0px 1px 2px #e0dada;\r\n      }\r\n\r\n      .data-row:hover {\r\n        background-color: #fefff9;\r\n        cursor: pointer;\r\n        box-shadow: 0px 0px 6px 4px #e9e3e3;\r\n        transition: box-shadow 0.2s ease;\r\n\r\n      }\r\n\r\n      .no-data {\r\n        text-align: center;\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      padding: 8px 16px;\r\n      text-align: left;\r\n      font-family: sans-serif;\r\n      color: #514f4f;\r\n    }\r\n\r\n    th {\r\n      font-weight: 600;\r\n      color: #2a2929;\r\n    }\r\n\r\n    mat-icon {\r\n      font-size: 20px;\r\n    }\r\n\r\n    .edit {\r\n      color: #4b4bbb\r\n    }\r\n\r\n    .delete {\r\n      color: #e34545\r\n    }\r\n  }\r\n\r\n}",
                    "styleUrl": "./project-list.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"top-container\">\r\n<div class=\"main-container\">\r\n    <app-header\r\n    [search]=\"true\"\r\n    [title]=\"'ProjectList'\"\r\n    (add)=\"openForm()\"\r\n    >\r\n    </app-header>\r\n</div>\r\n<mat-card class=\"project-card\">\r\n\r\n  <div class=\"table-container\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z2\">\r\n\r\n      <ng-container matColumnDef=\"id\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\r\n      </ng-container>\r\n\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Project Name</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.name || '-' }}</td>\r\n      </ng-container>\r\n\r\n      <!-- AssignTo -->\r\n      <ng-container matColumnDef=\"assignTo\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>AssignedTo</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.assignedTo | userName: users }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Status Column -->\r\n      <ng-container matColumnDef=\"status\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.status || '-' }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Start Date Column -->\r\n      <ng-container matColumnDef=\"startDate\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Start Date</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.startDate | date: 'dd MMMM yy' }}</td>\r\n      </ng-container>\r\n\r\n      <!-- End Date Column -->\r\n      <ng-container matColumnDef=\"deadline\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>DeadLine</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.status === 'Done' ? 'Completed' :  row.deadlineDate | duedate }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Description -->\r\n      <ng-container matColumnDef=\"description\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Description</th>\r\n        <td mat-cell *matCellDef=\"let row\">{{ row.description || '-' }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Actions Column -->\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          <button mat-icon-button (click)=\"openForm(row.id); $event.stopPropagation()\">\r\n            <mat-icon class=\"edit\">edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button  (click)=\"onDelete(row.id, row.name); $event.stopPropagation()\">\r\n            <mat-icon class=\"delete\">delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr class=\"data-row\" (click)=\"redirectToTask(row.id)\" mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      <tr class=\"mat-row\" *matNoDataRow>\r\n    <td class=\"mat-cell no-data\" [attr.colspan]=\"displayedColumns.length\">\r\n      No projects available.\r\n    </td>\r\n  </tr>\r\n    </table>\r\n    <mat-paginator [pageSize]=\"5\" [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n  </div>\r\n</mat-card>\r\n</div>\r\n\r\n"
        },
        {
            "name": "SearchInput",
            "id": "component-SearchInput-741f1602de20f39957dca747680c217c1af932bdddbe116f8918a1c88ff4f4c8cc3e56a233d5d33970623f739c57d3b1ef67a4cccc31f8b4df68859f751b64c8",
            "file": "src/app/shared/components/search-input/search-input.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search-input.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSearchInputChange",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { CommonService } from '../../../core/services/commonService/common-service';\r\n\r\n@Component({\r\n  selector: 'app-search-input',\r\n  imports: [FormsModule, MatFormFieldModule, MatInputModule, MatIconModule],\r\n  templateUrl: './search-input.html',\r\n  styleUrl: './search-input.scss',\r\n})\r\nexport class SearchInput {\r\n  constructor(private commonService: CommonService) {}\r\n\r\n  public onSearchInputChange(searchTerm: string) {\r\n    this.commonService.triggerSearch(searchTerm);\r\n  }\r\n}\r\n",
            "styleUrl": "./search-input.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "\r\n  <div class=\"search-container\">\r\n    <input #search type=\"search\" (input)=\"onSearchInputChange(search.value)\" placeholder=\"search...\" class=\"input\">\r\n    <mat-icon class=\"icon\" matSuffix>search</mat-icon>\r\n  </div>"
        },
        {
            "name": "TaskForm",
            "id": "component-TaskForm-8f2d5f198518cb1f460e645f7d81cd4f1273053268dfc742001e9d55e43afc2358caf2816e532008b1c500e88766fdf84f94e614538e2623e7182fc3322227ae",
            "file": "src/app/tasks/task-form/task-form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-form.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tasks",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<TaskForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "priorities",
                    "defaultValue": "['High', 'Medium', 'Low']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "statuses",
                    "defaultValue": "['To Do', 'In Progress', 'Done']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "taskId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "['Alice', 'Bob', 'Charlie']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Inject } from '@angular/core';\r\nimport {\r\n  ReactiveFormsModule,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TaskService } from '../task-service';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Tasks } from '../../core/models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-form',\r\n  imports: [\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    materialImports,\r\n  ],\r\n  templateUrl: './task-form.html',\r\n  styleUrl: './task-form.scss',\r\n})\r\nexport class TaskForm {\r\n  public form: FormGroup;\r\n  public taskId: string = '';\r\n  public users = ['Alice', 'Bob', 'Charlie'];\r\n  public statuses = ['To Do', 'In Progress', 'Done'];\r\n  public priorities = ['High', 'Medium', 'Low'];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: Tasks,\r\n    public dialogRef: MatDialogRef<TaskForm>,\r\n    private taskService: TaskService,\r\n    private commonService: CommonService\r\n  ) {\r\n    const defaultData = this.data || {};\r\n\r\n    if (defaultData) {\r\n      this.taskId = defaultData.id;\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      name: [defaultData.name || '', Validators.required],\r\n      dueDate: [defaultData.dueDate || ''],\r\n      status: [defaultData.status || 'To Do', Validators.required],\r\n      priority: [defaultData.priority || 'Low', Validators.required],\r\n      description: [defaultData.description || '', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  public onSubmit(): void {\r\n    if (this.form.valid) {\r\n      const UpdatedTask = {\r\n        ...this.form.value,\r\n        id: this.taskId,\r\n        projectId: this.data.projectId,\r\n      };\r\n\r\n      const response = this.taskId\r\n        ? this.taskService.updateTasks(UpdatedTask, this.taskId)\r\n        : this.taskService.addTasks(UpdatedTask);\r\n\r\n      response.subscribe(\r\n        (result) => {\r\n          if (result) {\r\n            this.dialogRef.close(true);\r\n            const message = this.taskId ? 'Task Updated' : 'Task Created';\r\n            this.commonService.openSuccessSnackBar(message);\r\n          }\r\n        },\r\n        (error) => {\r\n          this.commonService.openFailureSnackBar('something went wrong');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./task-form.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Tasks",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskForm>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Tasks",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskForm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n  <span class=\"title action\" >{{taskId ? 'Edit' : 'Add'}}</span><p class=\"title\">{{form.value.name ? form.value.name : 'New Task'}}</p>\r\n  </div>\r\n  <div class=\"body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" style=\"padding: 16px\">\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"name\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>DueDate</mat-label>\r\n        <input matInput [matDatepicker]=\"dueDate\" formControlName=\"dueDate\" />\r\n        <mat-datepicker-toggle\r\n          matIconSuffix\r\n          [for]=\"dueDate\"\r\n        ></mat-datepicker-toggle>\r\n        <mat-datepicker #dueDate></mat-datepicker>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Status</mat-label>\r\n        <mat-select formControlName=\"status\">\r\n          <mat-option *ngFor=\"let s of statuses\" [value]=\"s\"\r\n            >{{ s }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Priority</mat-label>\r\n        <mat-select formControlName=\"priority\">\r\n          <mat-option *ngFor=\"let p of priorities\" [value]=\"p\"\r\n            >{{ p }}</mat-option\r\n          >\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Description</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"description\" />\r\n      </mat-form-field>\r\n\r\n      <div class=\"actions-btn\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"form.invalid\"\r\n        >\r\n          {{taskId ? 'Update' : 'Add'}}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-b1d5ff7e30f3505c11b92b837c64a694bd3947d0efb8d73e75d619f6c584572203e169d41cc21283b4a47ea795d06350b7245db0b50881632a47aee6367cf2be",
            "file": "src/app/tasks/task-list/task-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [
                "./task-list.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tasks[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projectId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "statusFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tasks[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTasks",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterData",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Tasks[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Tasks[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "task",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Tasks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortTasks",
                    "args": [
                        {
                            "name": "sortBy",
                            "type": "\"dueDate\" | \"priority\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "sortBy",
                            "type": "\"dueDate\" | \"priority\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                },
                {
                    "name": "Header"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport {\r\n  CdkDragDrop,\r\n  DragDropModule,\r\n  moveItemInArray,\r\n} from '@angular/cdk/drag-drop';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TaskForm } from '../task-form/task-form';\r\nimport { Header } from '../../shared/components/header/header';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TaskService } from '../task-service';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Tasks } from '../../core/models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  templateUrl: './task-list.html',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    DragDropModule,\r\n    Header,\r\n    materialImports,\r\n  ],\r\n  styleUrls: ['./task-list.scss'],\r\n})\r\nexport class TaskListComponent {\r\n  public tasks: Tasks[] = [];\r\n\r\n  statusFilter: string = '';\r\n  sortField: string = '';\r\n  private projectId: string = '';\r\n\r\n  public filteredTasks: Tasks[] = [];\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private cdr: ChangeDetectorRef,\r\n    private route: ActivatedRoute,\r\n    private taskService: TaskService,\r\n    private commonService: CommonService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.projectId = this.route.snapshot.paramMap.get('projectId') || '';\r\n    if (this.projectId) {\r\n      this.fetchTasks(this.projectId);\r\n    }\r\n  }\r\n\r\n  private fetchTasks(projectId: string) {\r\n    this.taskService.fetchTasks(projectId).subscribe((res) => {\r\n      this.tasks = res;\r\n      this.filteredTasks = this.filterData();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  public filterData() {\r\n    let result = [...this.tasks];\r\n    if (this.statusFilter) {\r\n      result = result.filter((t) => t.status === this.statusFilter);\r\n    }\r\n    if (this.sortField === 'dueDate') {\r\n      result.sort(\r\n        (a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()\r\n      );\r\n    }\r\n    if (this.sortField === 'priority') {\r\n      const priorityOrder = { High: 1, Medium: 2, Low: 3 };\r\n      result.sort(\r\n        (a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public onDrop(event: CdkDragDrop<Tasks[]>) {\r\n    this.sortField = '';\r\n    moveItemInArray(this.tasks, event.previousIndex, event.currentIndex);\r\n    this.filteredTasks = this.filterData();\r\n  }\r\n\r\n  public openForm(task?: Tasks) {\r\n    const dialogRef = this.dialog.open(TaskForm, {\r\n      data: { ...task, projectId: this.projectId },\r\n      width: '400px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        this.fetchTasks(this.projectId);\r\n      }\r\n    });\r\n  }\r\n\r\n  public deleteTask(id: string, name: string) {\r\n    this.taskService.deleteTasks(id).subscribe((res) => {\r\n      if (res) {\r\n        this.fetchTasks(this.projectId);\r\n        this.commonService.openSuccessSnackBar(`Task deleted`);\r\n      }\r\n    });\r\n  }\r\n\r\n  public updateStatus(id: string, status: string) {\r\n    const updated = { status };\r\n    this.taskService.updateTasks({ status } as Tasks, id).subscribe(\r\n      (res) => console.log('status change'),\r\n      (err) => console.log(err)\r\n    );\r\n  }\r\n\r\n  public sortTasks(sortBy: 'dueDate' | 'priority') {\r\n    this.sortField = sortBy;\r\n    this.filteredTasks = this.filterData();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  height: calc(100% - 70px);\r\n  display: flex;\r\n  overflow-y: auto;\r\n  flex-direction: column;\r\n\r\n  .body-content {\r\n    overflow-y: auto;\r\n    height: 100%;\r\n    gap: 16px;\r\n    margin: 7px;\r\n    border-radius: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .task-card {\r\n    background: #fafafa;\r\n    border-radius: 12px;\r\n    box-shadow: 2px 2px 9px rgba(0, 0, 0, 0.1);\r\n    padding: 5px 8px 8px 8px;\r\n    border: 1px solid #e7dddd;\r\n    width: calc(50% - 30px);\r\n    height: calc(50% - 20px);\r\n\r\n    .task-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      overflow-x: auto;\r\n      overflow-y: hidden;\r\n\r\n      .left-header {\r\n        display: flex;\r\n        gap: 8px;\r\n        align-items: center;\r\n\r\n        mat-icon {\r\n          color: grey;\r\n          cursor: grabbing;\r\n        }\r\n      }\r\n\r\n      .actions {\r\n        display: flex;\r\n        gap: 10px;\r\n\r\n        .status-btn {\r\n          background-color: #fafafa;\r\n          padding: 5px 20px;\r\n          box-shadow: 0px 0px 2px 1px gray;\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    .task-body {\r\n      overflow: auto;\r\n      height: calc(100% - 42px);\r\n\r\n      p {\r\n        margin: 5px;\r\n        color: #1c1a1a;\r\n        font-size: 20px;\r\n\r\n        .heading {\r\n          color: #5c5757;\r\n          font-size: 20px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.project-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n}\r\n\r\n\r\n\r\n.task-list {\r\n  padding: 10px;\r\n  min-height: 100px;\r\n}\r\n\r\n.task-item {\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 8px 12px;\r\n  margin-bottom: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  cursor: move;\r\n}\r\n\r\n.drag-handle {\r\n  color: #888;\r\n}\r\n\r\n.edit {\r\n  color: #4b4bbb\r\n}\r\n\r\n.delete {\r\n  color: #e34545\r\n}\r\n\r\n.no-task {\r\n  height: 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n\r\n  .nt-txt {\r\n    padding: 5px;\r\n    font-size: 25px;\r\n    color: tomato;\r\n  }\r\n\r\n  .nt-btn {\r\n    padding: 9px;\r\n    border-style: none;\r\n    border-radius: 27px;\r\n    box-shadow: 0px 0px 5px 5px #e5e5e5;\r\n    width: 20%;\r\n    height: 10%;\r\n    font-size: 20px;\r\n    color: #2e2eec;\r\n    background-color: #cdd8ff;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.cdk-drag-preview.task-card {\r\n  background: #fafafa;\r\n  border-radius: 12px;\r\n  box-shadow: 2px 2px 9px rgba(0, 0, 0, 0.1);\r\n  padding: 5px 8px 8px 8px;\r\n  width: calc(50% - 30px);\r\n  height: calc(50% - 20px);\r\n  opacity: 0.95;\r\n  z-index: 1000;\r\n  border: 1px solid #e7dddd;\r\n\r\n  .task-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n\r\n    .left-header {\r\n      display: flex;\r\n      gap: 8px;\r\n      align-items: center;\r\n\r\n      mat-icon {\r\n        color: grey;\r\n        cursor: grabbing;\r\n      }\r\n    }\r\n\r\n    .actions {\r\n      display: flex;\r\n      gap: 10px;\r\n    }\r\n  }\r\n\r\n  .task-body {\r\n    overflow: auto;\r\n    height: calc(100% - 42px);\r\n\r\n    p {\r\n      margin: 5px;\r\n      color: #1c1a1a;\r\n      font-size: 20px;\r\n\r\n      .heading {\r\n        color: #5c5757;\r\n        font-size: 20px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.cdk-drag-placeholder {\r\n  opacity: 0;\r\n}\r\n\r\n.cdk-drag-animating {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}",
                    "styleUrl": "./task-list.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <app-header\r\n    [title]=\"'Tasks'\"\r\n    [filter]=\"true\"\r\n    [selectedFilter]=\"sortField\"\r\n    (emitFilter)=\"sortTasks($event)\"\r\n    (add)=\"openForm()\"\r\n  >\r\n  </app-header>\r\n\r\n  <div\r\n    class=\"body-content\"\r\n    cdkDropList\r\n    [cdkDropListData]=\"filteredTasks\"\r\n    (cdkDropListDropped)=\"onDrop($event)\"\r\n    *ngIf=\"filteredTasks.length; else noTask\"\r\n  >\r\n    <div\r\n      *ngFor=\"let task of filteredTasks\"\r\n      class=\"task-card\"\r\n      cdkDragBoundary=\".body-content\"\r\n      cdkDrag\r\n      [cdkDragDisabled]=\"filteredTasks.length === 1\"\r\n    >\r\n      <div class=\"task-header\">\r\n        <div class=\"left-header\">\r\n          <mat-icon cdkDragHandle class=\"icon\" matSuffix>drag_handle</mat-icon>\r\n          <strong>{{ task.name }}</strong>\r\n        </div>\r\n        <span class=\"actions\">\r\n          <button mat-icon-button (click)=\"openForm(task)\">\r\n            <mat-icon class=\"edit\">edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button (click)=\"deleteTask(task.id, task.name)\">\r\n            <mat-icon class=\"delete\">delete</mat-icon>\r\n          </button>\r\n        </span>\r\n      </div>\r\n      <div class=\"task-body\">\r\n        <p><span class=\"heading\">Status:</span> {{ task.status }}</p>\r\n        <p>\r\n          <span class=\"heading\">Due:</span> {{ task.dueDate | date: 'dd MMM yy'\r\n          }}\r\n        </p>\r\n        <p><span class=\"heading\">Priority:</span> {{ task.priority }}</p>\r\n        <p><span class=\"heading\">Description:</span> {{ task.description }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-template #noTask>\r\n    <div class=\"no-task\">\r\n      <span class=\"nt-txt\">Currently no task available for this projects</span>\r\n      <button class=\"nt-btn\" (click)=\"openForm()\">\r\n        Add New\r\n      </button>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "ToasterComponent",
            "id": "component-ToasterComponent-27bcbaf2b63c9f1d394cc3b4390a72c1b6061fa36ef15f48bb213a92bb90d3c83f09d9ce1b7600a9ff9d505d51fb2eed8b1770b0ee08d43d33b76a911432b1ad",
            "file": "src/app/shared/components/toaster-component/toaster-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toaster-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toaster-component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-toaster-component',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule, MatButtonModule],\r\n  templateUrl: './toaster-component.html',\r\n  styleUrl: './toaster-component.scss',\r\n})\r\nexport class ToasterComponent {\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any) {}\r\n\r\n  public dismiss() {\r\n    this.data.snackBar.dismiss();\r\n  }\r\n}\r\n",
            "styleUrl": "./toaster-component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"left\">\r\n    <mat-icon\r\n      *ngIf=\"data.type === 'success'; else errorIcon\"\r\n      class=\"success-icon icon\"\r\n      fontIcon=\"check_small\"\r\n    ></mat-icon>\r\n    <p class=\"text\">{{data.message}}</p>\r\n  </div>\r\n  <button class=\"action\" (click)=\"dismiss()\" matButton>{{data.action}}</button>\r\n\r\n  <ng-template #errorIcon>\r\n    <mat-icon class=\"error-icon icon\" fontIcon=\"close_small\"></mat-icon>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "TopHeader",
            "id": "component-TopHeader-b5f2ada0fdd9f7c42111ad361ff8c4d3057419fb059a6a76e2e43e40f1f9d5680f02040d17529a11d4d8edf24db5a4d2e32d33f77b850531248f2c9e0469c838",
            "file": "src/app/core/top-header/top-header.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./top-header.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "viewProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "Notification"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Notification } from '../components/notification/notification';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../../auth/authService/auth-service';\r\nimport { CommonService } from '../services/commonService/common-service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { UserForm } from '../../users/user-form/user-form';\r\nimport { materialImports } from '../models/material.imports';\r\n\r\n@Component({\r\n  selector: 'app-top-header',\r\n  imports: [Notification, CommonModule, materialImports],\r\n  templateUrl: './top-header.html',\r\n  styleUrl: './top-header.scss',\r\n})\r\nexport class TopHeader {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private commonService: CommonService,\r\n    private dialog: MatDialog\r\n  ) {}\r\n\r\n  public logOut() {\r\n    this.authService.logout();\r\n    this.commonService.openSuccessSnackBar('LogOut successfully', 'ok');\r\n  }\r\n\r\n  public viewProfile() {\r\n    const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n    if (currentUser.id) {\r\n      const dialogRef = this.dialog.open(UserForm, {\r\n        data: { id: currentUser.id, canEdit: false },\r\n        width: '400px',\r\n      });\r\n      dialogRef.afterClosed().subscribe((result) => {});\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./top-header.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"left-content\">\r\n    <span class=\"title\">Project Mangement</span>\r\n  </div>\r\n  <div class=\"right-content\">\r\n    <app-notification></app-notification>\r\n    <div class=\"profile\">\r\n      <button class=\"profile-btn\" matIconButton [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon class=\"avatar\">account_circle</mat-icon>\r\n      </button>\r\n\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button class=\"logout-btn\" mat-menu-item (click)=\"logOut()\">\r\n          <mat-icon class=\"logout-icon\">logout</mat-icon>\r\n          <span class=\"logout-text\">Logout</span>\r\n        </button>\r\n        <button class=\"view-btn\" mat-menu-item (click)=\"viewProfile()\">\r\n          <mat-icon class=\"view-icon\">visibility</mat-icon>\r\n          <span class=\"view-text\">View profile</span>\r\n        </button>\r\n      </mat-menu>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UnAuthorize",
            "id": "component-UnAuthorize-b799f5d7a4f01dc844ce5679b4ac1aad0c4a604ee7d6ebd10c8a88d9a9478e99131aa6bca3555d3d11c226a7ab99fcfdfdef327fdecd8b6673e61341b2032aa4",
            "file": "src/app/shared/components/un-authorize/un-authorize.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-un-authorize",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./un-authorize.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-un-authorize',\r\n  imports: [RouterModule],\r\n  templateUrl: './un-authorize.html',\r\n  styleUrl: './un-authorize.scss'\r\n})\r\nexport class UnAuthorize {\r\n\r\n}\r\n",
            "styleUrl": "./un-authorize.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"text-wrapper\">\r\n    <div class=\"title\" data-content=\"404\">\r\n        403 - ACCESS DENIED\r\n    </div>\r\n\r\n    <div class=\"subtitle\">\r\n        Oops, You don't have permission to access this page.\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <a class=\"button\" [routerLink]=\"'/dashboard'\" routerLinkActive=\"router-link-active\">Go to homepage</a>\r\n    </div>\r\n</div>"
        },
        {
            "name": "UserForm",
            "id": "component-UserForm-8e33c3c378a9ed7849614e7a8a43ec6a3c4fa3b1cd53623ae66b663795a1202656f1ba97eb5d113afe8033fbb0ee561481c400152f0ec334ac381470275e9877",
            "file": "src/app/users/user-form/user-form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "app-user-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-form.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canEdit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "userDialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "['Admin', 'Project Manager', 'Developer']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userData",
                    "defaultValue": "{} as Users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Inject } from '@angular/core';\r\nimport {\r\n  ReactiveFormsModule,\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { provideNativeDateAdapter } from '@angular/material/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { UserService } from '../user-service';\r\nimport { Observable } from 'rxjs';\r\nimport { userDialogData } from '../../core/models/dialogData.model';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-user-form',\r\n  imports: [CommonModule, ReactiveFormsModule, materialImports],\r\n  providers: [provideNativeDateAdapter()],\r\n  templateUrl: './user-form.html',\r\n  styleUrl: './user-form.scss',\r\n})\r\nexport class UserForm {\r\n  public form: FormGroup;\r\n  public currentDate: Date = new Date();\r\n  public userId: string = '';\r\n  public roles = ['Admin', 'Project Manager', 'Developer'];\r\n  public userData = {} as Users;\r\n  public canEdit: boolean = true;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    @Inject(MAT_DIALOG_DATA) public data: userDialogData,\r\n    private dialogRef: MatDialogRef<UserForm>,\r\n    private userService: UserService,\r\n    private commonService: CommonService\r\n  ) {\r\n    if (this.data && this.data.id) {\r\n      this.userId = this.data.id;\r\n      this.canEdit = this.data.canEdit !== undefined ? this.data.canEdit : true;\r\n      this.getUser();\r\n    }\r\n\r\n    this.form = this.fb.group({\r\n      fullName: [this.userData.fullName || '', Validators.required],\r\n      userName: [this.userData.userName || '', Validators.required],\r\n      password: [this.userData.password || '', Validators.required],\r\n      role: [this.userData.role || '', Validators.required],\r\n    });\r\n\r\n    if (!this.canEdit) {\r\n      this.form.get('fullName')?.disable();\r\n      this.form.get('userName')?.disable();\r\n      this.form.get('password')?.disable();\r\n      this.form.get('role')?.disable();\r\n    }\r\n  }\r\n\r\n  private getUser() {\r\n    this.userService.getUser(this.userId).subscribe(\r\n      (response) => {\r\n        this.userData = response;\r\n        const { id, creationDate, ...pro } = response;\r\n        this.form.setValue(pro);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public onSubmit(): void {\r\n    if (!this.canEdit) {\r\n      this.dialogRef.close();\r\n    }\r\n    if (this.form.valid) {\r\n      let response: Observable<Users>;\r\n\r\n      let UpdatedUser: Users = this.form.value;\r\n\r\n      if (this.userId) {\r\n        response = this.userService.updateUser(UpdatedUser, this.userId);\r\n      } else {\r\n        UpdatedUser['creationDate'] = new Date();\r\n        response = this.userService.addUser(UpdatedUser);\r\n      }\r\n\r\n      response.subscribe(\r\n        (result) => {\r\n          if (result) {\r\n            this.dialogRef.close(true);\r\n            const msg = this.userId ? 'User Updated' : 'User Added';\r\n            this.commonService.openSuccessSnackBar(msg);\r\n          }\r\n        },\r\n        (error) => {\r\n          this.commonService.openFailureSnackBar('something went wrong');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./user-form.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "userDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserForm>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "userDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserForm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <span *ngIf=\"canEdit\" class=\"title action\"\r\n      >{{userId ? 'Edit' : 'Add'}}</span\r\n    >\r\n    <p class=\"title\">{{form.get('fullName')?.value || 'New User'}}</p>\r\n  </div>\r\n  <div class=\"body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" style=\"padding: 16px\">\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label> FullName</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"fullName\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>UserName</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"userName\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"password\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Role</mat-label>\r\n        <mat-select formControlName=\"role\">\r\n          <mat-option *ngFor=\"let r of roles\" [value]=\"r\">{{ r }}</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <div class=\"actions-btn\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"form.invalid\"\r\n        >\r\n          {{canEdit ? userId ? 'Update' : 'Add' : 'Close'}}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UserList",
            "id": "component-UserList-ee00e98acb00f782c8b38489e94d79932c9cf25319bcae36ce08c8d40e3b8c8e94b6d3aa64430cb9a16f87a502d64024d8d4d61bc67b959a3fd5543779cda31f",
            "file": "src/app/users/user-list/user-list.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-list.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<any>(this.users)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\r\n    'id',\r\n    'name',\r\n    'userName',\r\n    'creationDate',\r\n    'password',\r\n    'role',\r\n    'actions',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Users[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDatasource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "Header"
                },
                {
                    "name": "DuedatePipe",
                    "type": "pipe"
                },
                {
                    "name": "materialImports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, ViewChild } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonService } from '../../core/services/commonService/common-service';\r\nimport { Header } from '../../shared/components/header/header';\r\nimport { DuedatePipe } from '../../shared/pipes/duedate-pipe';\r\nimport { UserForm } from '../user-form/user-form';\r\nimport { UserService } from '../user-service';\r\nimport { materialImports } from '../../core/models/material.imports';\r\nimport { Users } from '../../core/models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    Header,\r\n    DuedatePipe,\r\n    materialImports,\r\n  ],\r\n  templateUrl: './user-list.html',\r\n  styleUrl: './user-list.scss',\r\n})\r\nexport class UserList {\r\n  private sub!: Subscription;\r\n\r\n  public users: Users[] = [];\r\n  public displayedColumns: string[] = [\r\n    'id',\r\n    'name',\r\n    'userName',\r\n    'creationDate',\r\n    'password',\r\n    'role',\r\n    'actions',\r\n  ];\r\n  public dataSource = new MatTableDataSource<any>(this.users);\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private commonService: CommonService,\r\n    private cdr: ChangeDetectorRef,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.sub = this.commonService.search$.subscribe((term) => {\r\n      const filteredData = this.commonService.filteredSearchData(\r\n        term,\r\n        this.users,\r\n        ['id', 'fullName', 'userName', 'password', 'role']\r\n      );\r\n      this.dataSource.data = filteredData;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.fetchUsers();\r\n  }\r\n\r\n  private updateDatasource() {\r\n    this.dataSource.data = this.users;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n\r\n    // Default sort: ID ascending\r\n    this.sort.active = 'id';\r\n    this.sort.direction = 'asc';\r\n\r\n    this.sort.sortChange.emit({\r\n      active: this.sort.active,\r\n      direction: this.sort.direction,\r\n    });\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  private fetchUsers() {\r\n    this.userService.fetchUsers().subscribe(\r\n      (response) => {\r\n        this.users = response;\r\n\r\n        this.updateDatasource();\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public openForm(id?: string) {\r\n    const dialogRef = this.dialog.open(UserForm, {\r\n      data: { id },\r\n      width: '400px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        this.fetchUsers();\r\n      }\r\n    });\r\n  }\r\n\r\n  public onDelete(userId: string) {\r\n    this.userService.deleteUser(userId).subscribe(\r\n      (res) => {\r\n        if (res) {\r\n          this.fetchUsers();\r\n          this.commonService.openSuccessSnackBar('User Deleted');\r\n        }\r\n      },\r\n      (err) => {\r\n        console.log('something went wrong', err);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.sub?.unsubscribe();\r\n  }\r\n}\r\n",
            "styleUrl": "./user-list.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"main-container\">\r\n  <app-header [search]=\"true\" [title]=\"'UsersList'\" (add)=\"openForm()\">\r\n  </app-header>\r\n  <mat-card class=\"project-card\">\r\n    <div class=\"table-container\">\r\n      <table\r\n        mat-table\r\n        [dataSource]=\"dataSource\"\r\n        matSort\r\n        class=\"mat-elevation-z2\"\r\n      >\r\n        <ng-container matColumnDef=\"id\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\r\n          <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Full Name</th>\r\n          <td mat-cell *matCellDef=\"let row\">{{ row.fullName || '-' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- AssignTo -->\r\n        <ng-container matColumnDef=\"userName\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>UserName</th>\r\n          <td mat-cell *matCellDef=\"let row\">{{ row.userName || '-' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- AssignTo -->\r\n        <ng-container matColumnDef=\"password\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>PassWord</th>\r\n          <td mat-cell *matCellDef=\"let row\">{{ row.password || '-' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Start Date Column -->\r\n        <ng-container matColumnDef=\"creationDate\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n            Created Date\r\n          </th>\r\n          <td mat-cell *matCellDef=\"let row\">\r\n            {{ row.creationDate | date: 'dd MMMM yy' }}\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Description -->\r\n        <ng-container matColumnDef=\"role\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Role</th>\r\n          <td mat-cell *matCellDef=\"let row\">{{ row.role || '-' }}</td>\r\n        </ng-container>\r\n\r\n        <!-- Actions Column -->\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n          <td mat-cell *matCellDef=\"let row\">\r\n            <button mat-icon-button color=\"primary\" (click)=\"openForm(row.id)\">\r\n              <mat-icon class=\"edit\">edit</mat-icon>\r\n            </button>\r\n            <button mat-icon-button color=\"warn\" (click)=\"onDelete(row.id)\">\r\n              <mat-icon class=\"delete\">delete</mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        <tr class=\"mat-row\" *matNoDataRow>\r\n          <td class=\"mat-cell no-data\" [attr.colspan]=\"displayedColumns.length\">\r\n            No Users Added.\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <mat-paginator\r\n        [pageSize]=\"5\"\r\n        [pageSizeOptions]=\"[5, 10, 20]\"\r\n        showFirstLastButtons\r\n      ></mat-paginator>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZonelessChangeDetection(),\r\n    provideRouter(routes), provideClientHydration(withEventReplay()),\r\n    provideHttpClient( withInterceptors([handlehttpInterceptor])),\r\n    importProvidersFrom(ReactiveFormsModule),\r\n    provideNativeDateAdapter(),\r\n    provideCharts(withDefaultRegisterables())\r\n  ]\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(App, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "join(import.meta.dirname, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "handlehttpInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/handlehttp-interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const authService = inject(AuthService);\r\n  const AuthToken = authService.getToken();\r\n\r\n  if (AuthToken) {\r\n    const authreq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `BEARER ${AuthToken}`,\r\n      },\r\n    });\r\n    return next(authreq).pipe(\r\n      catchError((error) => {\r\n        if (error.status === 401) {\r\n          authService.logout();\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n  return next(req);\r\n}"
            },
            {
                "name": "materialImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/models/material.imports.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatMenuModule,\r\n  MatBadgeModule,\r\n  MatProgressSpinnerModule,\r\n  MatTableModule,\r\n  MatDividerModule,\r\n  MatDialogModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatPaginatorModule,\r\n  MatSortModule,\r\n  MatFormFieldModule,\r\n  MatSelectModule,\r\n  MatDatepickerModule,\r\n  MatSidenavModule\r\n]"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.",
                "description": "<p>Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.</p>\n"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(withRoutes(serverRoutes))\r\n  ]\r\n}"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "join(import.meta.dirname, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.",
                    "description": "<p>Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.</p>\n"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZonelessChangeDetection(),\r\n    provideRouter(routes), provideClientHydration(withEventReplay()),\r\n    provideHttpClient( withInterceptors([handlehttpInterceptor])),\r\n    importProvidersFrom(ReactiveFormsModule),\r\n    provideNativeDateAdapter(),\r\n    provideCharts(withDefaultRegisterables())\r\n  ]\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(App, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(withRoutes(serverRoutes))\r\n  ]\r\n}"
                }
            ],
            "src/app/core/interceptors/handlehttp-interceptor.ts": [
                {
                    "name": "handlehttpInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/handlehttp-interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const authService = inject(AuthService);\r\n  const AuthToken = authService.getToken();\r\n\r\n  if (AuthToken) {\r\n    const authreq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `BEARER ${AuthToken}`,\r\n      },\r\n    });\r\n    return next(authreq).pipe(\r\n      catchError((error) => {\r\n        if (error.status === 401) {\r\n          authService.logout();\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n  return next(req);\r\n}"
                }
            ],
            "src/app/core/models/material.imports.ts": [
                {
                    "name": "materialImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/models/material.imports.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatMenuModule,\r\n  MatBadgeModule,\r\n  MatProgressSpinnerModule,\r\n  MatTableModule,\r\n  MatDividerModule,\r\n  MatDialogModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatPaginatorModule,\r\n  MatSortModule,\r\n  MatFormFieldModule,\r\n  MatSelectModule,\r\n  MatDatepickerModule,\r\n  MatSidenavModule\r\n]"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\r\n  {\r\n    path: '**',\r\n    renderMode: RenderMode.Prerender\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/authService/auth-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/gaurds/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/gaurds/role.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login-component/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/notification/notification.ts",
                "type": "component",
                "linktype": "component",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/handlehttp-interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handlehttpInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/dashboard.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Kpis",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/dialogData.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "userDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/material.imports.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materialImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/notification.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notifications",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/project.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Projects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tasks",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Users",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/commonService/common-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/cron-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CronService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/loader-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/notification-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/top-header/top-header.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopHeader",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-component/dashboard-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/project-form/project-form.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectForm",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/project-list/project-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/projects/project-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.ts",
                "type": "component",
                "linktype": "component",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/home-component/home-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/not-found/not-found.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFound",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/search-input/search-input.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toaster-component/toaster-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToasterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/un-authorize/un-authorize.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnAuthorize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/duedate-pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DuedatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/user-name-pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "UserNamePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/task-form/task-form.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskForm",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/task-list/task-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/task-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/users/user-form/user-form.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserForm",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/users/user-list/user-list.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserList",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/users/user-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            }
        ]
    }
}